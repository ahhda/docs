"use strict";(self.webpackChunkcow_docs=self.webpackChunkcow_docs||[]).push([[4306],{3905:(e,t,i)=>{i.d(t,{Zo:()=>c,kt:()=>d});var o=i(7294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,o)}return i}function n(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,o,r=function(e,t){if(null==e)return{};var i,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)i=a[o],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)i=a[o],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var l=o.createContext({}),p=function(e){var t=o.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):n(n({},t),e)),i},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var i=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=p(i),m=r,d=h["".concat(l,".").concat(m)]||h[m]||u[m]||a;return i?o.createElement(d,n(n({ref:t},c),{},{components:i})):o.createElement(d,n({ref:t},c))}));function d(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=i.length,n=new Array(a);n[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[h]="string"==typeof e?e:r,n[1]=s;for(var p=2;p<a;p++)n[p]=i[p];return o.createElement.apply(null,n)}return o.createElement.apply(null,i)}m.displayName="MDXCreateElement"},1434:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>n,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var o=i(7462),r=(i(7294),i(3905));const a={},n="The Batch Auction Optimization Problem",s={unversionedId:"solvers/in-depth-solver-specification/the-batch-auction-optimization-problem",id:"solvers/in-depth-solver-specification/the-batch-auction-optimization-problem",title:"The Batch Auction Optimization Problem",description:"In this section, we describe all the different components of the optimization problem that needs to be solved within each batch.",source:"@site/docs/solvers/in-depth-solver-specification/the-batch-auction-optimization-problem.md",sourceDirName:"solvers/in-depth-solver-specification",slug:"/solvers/in-depth-solver-specification/the-batch-auction-optimization-problem",permalink:"/docs/docs/solvers/in-depth-solver-specification/the-batch-auction-optimization-problem",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/solvers/in-depth-solver-specification/the-batch-auction-optimization-problem.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Solver Auction and Rewards",permalink:"/docs/docs/solvers/in-depth-solver-specification/solver-auction-and-rewards"},next:{title:"Build on top of CoW Protocol",permalink:"/docs/docs/tutorials/build-on-top-of-cow-protocol"}},l={},p=[{value:"User Orders",id:"user-orders",level:2},{value:"Limit Sell Orders",id:"limit-sell-orders",level:4},{value:"Liquidity Orders",id:"liquidity-orders",level:2},{value:"Fees ",id:"fees-",level:2},{value:"Solution",id:"solution",level:2}],c={toc:p},h="wrapper";function u(e){let{components:t,...i}=e;return(0,r.kt)(h,(0,o.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"the-batch-auction-optimization-problem"},"The Batch Auction Optimization Problem"),(0,r.kt)("p",null,"In this section, we describe all the different components of the optimization problem that needs to be solved within each batch."),(0,r.kt)("h2",{id:"user-orders"},"User Orders"),(0,r.kt)("p",null,"Suppose that there are $$","{","1,2,...k","}","$$ tokens. From a high-level perspective, we can define a user order as an ",(0,r.kt)("em",{parentName:"p"},"acceptance set")," $$S \\subset \\mathbb R^k$$ specifying the trades a user is willing to accept (where negative entries of a vector represent tokens sold, while positive entries represent tokens bought). So, for example, if $$k=2$$ and $$\\begin{bmatrix} x ","\\","-y \\end{bmatrix}\\in S$$ then a user is happy to receive ",(0,r.kt)("em",{parentName:"p"},"x")," units of token 1 in exchange for ",(0,r.kt)("em",{parentName:"p"},"y")," units of token 2 (note: this is all from the user's perspective and is therefore net of fees)."),(0,r.kt)("p",null,"Clearly,  $$\\mathbb R^k",(0,r.kt)("em",{parentName:"p"},"+ \\subset S$$, that is, a user is always willing to accept an order in which they receive a positive amount of tokens without paying anything. Similarly, $$\\mathbb R^k"),"{-} \\cap S = 0$$ because no user would accept to pay tokens without receiving anything. The interesting elements of the acceptance set are, therefore, those with at least one positive entry and at least one negative entry. We also assume that $$0 \\in S$$, that is, when submitting an order a user accepts that the order may not be filled."," "),(0,r.kt)("p",null,"To each order $$S$$ we may assign a ",(0,r.kt)("em",{parentName:"p"},"utility function")," $$U",(0,r.kt)("em",{parentName:"p"},'S:S\\rightarrow \\mathbb R$$ specifying a numerical value to each trade in the acceptance set, to be interpreted as "how good" a trade is from the point of view of the user who submitted order _S'),". By definition $$U_S(0)=0$$."),(0,r.kt)("p",null,"Practically speaking, CoW Protocol allows only some types of orders, which we can think of as constraints on the set ",(0,r.kt)("em",{parentName:"p"},"S")," that a user can submit",(0,r.kt)("em",{parentName:"p"},".")," One such constraint is that only pairwise swaps are allowed, that is, all vectors in $$S$$  have zeros in $$k-2$$ dimensions. Furthermore, each order must fit within one of the categories we now discuss. To simplify notation, when discussing these categories we assume that $$k=2$$."),(0,r.kt)("h4",{id:"limit-sell-orders"},"Limit Sell Orders"),(0,r.kt)("p",null,"A ",(0,r.kt)("em",{parentName:"p"},"limit sell order")," specifies a maximum sell amount of a given token ",(0,r.kt)("em",{parentName:"p"},"Y")," > 0, a buy token, and a limit price $$\\pi$$, that corresponds to the worst-case exchange rate that the user is willing to settle for. They can be fill-or-kill whenever the executed sell amount must be Y (or nothing). They can be partially fillable if the executed sell amount can be smaller or equal to Y.  Formally, if ",(0,r.kt)("em",{parentName:"p"},"x")," denotes the (proposed) buy amount and ",(0,r.kt)("em",{parentName:"p"},"y")," denotes the (proposed) sell amount of the order, a fill-or-kill limit sell order has the form"),(0,r.kt)("p",null,"$$S=\\left","{","\\begin{bmatrix} x ","\\","-y \\end{bmatrix}~~s.t. ~~\\frac{y}{\\pi}\\leq x \\mbox{ and } y\\in","{","0,Y","}"," \\right","}",",$$"),(0,r.kt)("p",null,"and a partially-fillable sell order has the form"),(0,r.kt)("p",null,"$$S= \\left ","{"," \\begin{bmatrix} x ","\\","-y \\end{bmatrix} ~~s.t. ~~\\frac{y}{\\pi} \\leq x \\mbox{ and } y \\in ","[0,Y]"," \\right ","}",".$$"),(0,r.kt)("p",null,"In both cases, the utility function is defined as"),(0,r.kt)("p",null,"$$U(x,-y)=(x-y / \\pi)p(b)$$,"),(0,r.kt)("p",null,"where $$(x-y / \\pi)$$ is the additional amount of buy tokens received by the user relative to the case in which they trade at the limit price, and $$p(b)$$ is the price of the buy token relative to a num\xe9raire (in our case ETH) and is externally provided (i.e., by an oracle). The function $$U(x,-y)$$ is therefore expressed in units of the num\xe9raire and is always non-negative."),(0,r.kt)("p",null,"A final observation is that orders can be valid over multiple batches. For a fill-or-kill, this means that an order that is not filled remains valid for a certain period (specified by the user). For a partially-fillable order, this also means that only a fraction of it may be executed in any given batch."," "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Limit Buy Orders")),(0,r.kt)("p",null,"A ",(0,r.kt)("em",{parentName:"p"},"limit buy order")," is specified by a maximum buy amount ",(0,r.kt)("em",{parentName:"p"},"X")," > 0 and a limit price $$\\pi$$ corresponding to the worst-case exchange rate the user is willing to settle for. With ",(0,r.kt)("em",{parentName:"p"},"x")," denoting the buy amount and ",(0,r.kt)("em",{parentName:"p"},"y")," denoting the sell amount of the order, fill-or-kill limit buy orders have the form"),(0,r.kt)("p",null,"$$S = \\left","{","\\begin{bmatrix} x ","\\","-y \\end{bmatrix}",(0,r.kt)("del",{parentName:"p"},"s.t.")," y \\leq x \\cdot \\pi \\mbox{ and }\\;\\; x \\in","{","0, X","}"," \\right","}","$$"),(0,r.kt)("p",null,"while partially-fillable limit buy orders have the form"),(0,r.kt)("p",null,"$$S = \\left","{","\\begin{bmatrix} x ","\\","-y \\end{bmatrix}",(0,r.kt)("del",{parentName:"p"},"s.t.")," y \\leq x \\cdot \\pi \\mbox{ and }\\;\\; x \\in","[0, X]"," \\right","}",".$$"),(0,r.kt)("p",null,"Again, the utility function is defined as"),(0,r.kt)("p",null," ","$$U(","{","x,-y","}",")=(x \\cdot \\pi-y)p(s)$$,"),(0,r.kt)("p",null,"where $$p(s)$$ is the price of the sell token relative to a num\xe9raire and is externally provided. Also here, orders can be executed over multiple batches."),(0,r.kt)("h2",{id:"liquidity-orders"},"Liquidity Orders"),(0,r.kt)("p",null,"Liquidity orders are orders not submitted by users. They represent sources of liquidity that are available to a solver, for example, automated market makers or private liquidity pools. They look identical to user orders, in the sense that each liquidity order can be represented by an acceptance set $$L \\subset \\mathbb R^k$$. The main difference to user orders is that the utility function of a liquidity order is always zero."," "),(0,r.kt)("h2",{id:"fees-"},"Fees"," "),(0,r.kt)("p",null,"Each user order has an associated fee paid to the protocol. At a high level, these fees can be represented by a function that, for a given order $$S$$ maps all possible trades to a positive vector of tokens, that is $$f",(0,r.kt)("em",{parentName:"p"},"S:S \\rightarrow \\mathbb R^k"),"+$$   with $$f_S(0)=0$$."),(0,r.kt)("p",null,'From the practical viewpoint, for market fill-or-kill orders, the fee is always in the sell token and is pre-specified: it is an estimate of the cost of executing an order and is explicitly shown to the user before the order is submitted. Instead, (long-standing) limit orders are "feeless" from the user\'s perspective: users are guaranteed a limit price without specifying how fees will be calculated. For fill-or-kill limit orders, the protocol computes a fee each time such an order enters a batch auction, while for partially-fillable limit orders, solvers are the ones that need to propose a fee. In this latter case, the expectation is that this fee should equal the cost of execution of this trade in isolation. The fee of limit orders is again in the sell token.'),(0,r.kt)("h2",{id:"solution"},"Solution"),(0,r.kt)("p",null,"Solvers propose solutions to the protocol, where a solution is a set of trades to execute. Formally, suppose that there are $$I$$ users and ",(0,r.kt)("em",{parentName:"p"},"J")," liquidity sources. A solution is a list of trades $$","{","o_1, o_2, ...o_I, l_1, l_2, ..., l_J","}","$$ one per user and one per liquidity source such that"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Maximum size of solution:")," The total number of executed orders and AMMs does not exceed a certain number within each batch due to limitations regarding the size of a block on the blockchain."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Incentive compatibility and feasibility:")," the trades respect the user and liquidity orders, that is, $$o_i\\in S_i",(0,r.kt)("del",{parentName:"li"},"\\forall i\\leq I$$  and $$l_j \\in L_j"),"\\forall j\\leq J$$."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Uniform clearing prices:")," all users must face the same prices. Importantly, this constraint is defined at the moment when the swap occurs. So, for example, suppose user ",(0,r.kt)("em",{parentName:"li"},"i")," receives ",(0,r.kt)("em",{parentName:"li"},"x")," units of token 1 in exchange for ",(0,r.kt)("em",{parentName:"li"},"y")," units of token 2 and that the protocol takes a fee in the sell token $$f",(0,r.kt)("em",{parentName:"li"},"2$$. Define $$p"),"{1,2}=\\frac{y-f",(0,r.kt)("em",{parentName:"li"},"2}{x}$$ as the price at which the swap occurs. Uniform clearing prices means that $$p"),"{1,2}$$ is the same for all users swapping token 1 and token 2. Furthermore, prices must be consistent, in the sense that for any three tokens 1, 2, and 3, if $$p",(0,r.kt)("em",{parentName:"li"},"{1,2},~ p"),"{2,3}, ~p",(0,r.kt)("em",{parentName:"li"},"{1,3}$$ are well-defined, then it must be that $$p"),"{1,2}\\cdot p",(0,r.kt)("em",{parentName:"li"},"{2,3}=p"),"{1,3}$$. Note that this implies that prices can be expressed with respect to a common num\xe9raire, giving rise to a uniform price clearing vector $$p$$."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Token conservation per token:")," No token amounts can be created or destroyed. In other words, for every token, the total amount sold must be equal to the total amount bought of this token."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Social consensus rules:")," These are a set of principles that solvers should follow, which were voted by CIPs. They are specified on the page Social Consensus Rules.")),(0,r.kt)("p",null,"Note that systematic violation of these rules might lead to penalizing or even slashing (if the DAO decides so)."),(0,r.kt)("p",null,"From the protocol viewpoint, each solution that satisfies the above constraints has a ",(0,r.kt)("em",{parentName:"p"},"quality")," given by the sum of the utility generated, and the fees paid to the protocol:"),(0,r.kt)("p",null,"$$\\sum_o \u200bU(o)+p\\cdot \\sum_o\u200bf(o)$$,"),(0,r.kt)("p",null,"where ",(0,r.kt)("em",{parentName:"p"},"p")," is a vector of externally-determined prices used to express all fees in terms of the common num\xe9raire."," "),(0,r.kt)("p",null,"Finally, solvers compete for the right to settle a batch by participating in an auction, aiming to implement the solution with the highest quality at the lowest possible cost to the protocol. For more details, see the page ",(0,r.kt)("a",{parentName:"p",href:"/docs/docs/solvers/in-depth-solver-specification/solver-auction-and-rewards"},"Solver Auction and Rewards"),"."))}u.isMDXComponent=!0}}]);