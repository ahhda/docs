"use strict";(self.webpackChunkcow_docs=self.webpackChunkcow_docs||[]).push([[3926],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=s,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,r=new Array(o);r[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:s,r[1]=i;for(var l=2;l<o;l++)r[l]=n[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},579:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=n(7462),s=(n(7294),n(3905));const o={},r="Sample Test Instances",i={unversionedId:"solvers/in-depth-solver-specification/sample-test-instances",id:"solvers/in-depth-solver-specification/sample-test-instances",title:"Sample Test Instances",description:"In this section, we provide sample instances following the json format described in the previous sections, along with the optimal solution, again in the appropriate json format. These can be used for testing purposes while developing a solver. We clarify that the solutions provided are optimal up to a very small factor (caused by rounding very small amounts).\\",source:"@site/docs/solvers/in-depth-solver-specification/sample-test-instances.md",sourceDirName:"solvers/in-depth-solver-specification",slug:"/solvers/in-depth-solver-specification/sample-test-instances",permalink:"/docs/docs/solvers/in-depth-solver-specification/sample-test-instances",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/solvers/in-depth-solver-specification/sample-test-instances.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Output: Batch auction solutions",permalink:"/docs/docs/solvers/in-depth-solver-specification/output-batch-auction-solutions"},next:{title:"Slippage accounting",permalink:"/docs/docs/solvers/in-depth-solver-specification/slippage-accounting"}},c={},l=[],p={toc:l},d="wrapper";function u(e){let{components:t,...n}=e;return(0,s.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"sample-test-instances"},"Sample Test Instances"),(0,s.kt)("p",null,"In this section, we provide sample instances following the json format described in the previous sections, along with the optimal solution, again in the appropriate json format. These can be used for testing purposes while developing a solver. We clarify that the solutions provided are optimal up to a very small factor (caused by rounding very small amounts).\\\n\\\n","-"," ",(0,s.kt)("a",{parentName:"p",href:"https://drive.google.com/file/d/1VIfuMVOG62bFHHbXAEOCtPG4ZTRiPi3O/view?usp=sharing"},"Single order Instances"),"\\\n","-"," ",(0,s.kt)("a",{parentName:"p",href:"https://drive.google.com/file/d/13RaEsDaqt7IHnLcEefFLj_yPIrlJHYX7/view?usp=sharing"},"Multiple-orders on single token pairs Instances"),"\\\n","-"," ",(0,s.kt)("a",{parentName:"p",href:"https://drive.google.com/file/d/10RuJ93gHwo5uBZ6xST4k7-UMTlXBbmj-/view?usp=sharing"},"Multiple orders on multiple token pairs Instances"),"\\\n","-"," ",(0,s.kt)("a",{parentName:"p",href:"https://drive.google.com/file/d/1sOXd8t4dfckVxAMz2TAnsisUve3M6iiG/view?usp=sharing"},"Example Instance with solution containing calldata"),"\\\n\\\n\\\nIn general, the instance json's of all recent auctions can be found in the following links:\\\n","-"," ","[","prod] ",(0,s.kt)("a",{parentName:"p",href:"https://solver-instances.s3.eu-central-1.amazonaws.com/prod-mainnet/$AUCTION%5C_ID.json%5C"},"https://solver-instances.s3.eu-central-1.amazonaws.com/prod-mainnet/$AUCTION\\_ID.json\\"),"\n","-"," ","[","barn] ",(0,s.kt)("a",{parentName:"p",href:"https://solver-instances.s3.eu-central-1.amazonaws.com/staging-mainnet/$AUCTION%5C_ID.json%5C"},"https://solver-instances.s3.eu-central-1.amazonaws.com/staging-mainnet/$AUCTION\\_ID.json\\"),"\n\\\nIn the above urls, one needs to replace the $AUCTION","_","ID with an actual auction","_","id. As a clarifcation, each auction taking place has a unique identifier that determines it. The easiest way to recover the id of an auction that resulted in a settlement taking place onchain is to start from the tx hash of the settlement, and use the competition endpoint to recover this id. Here is one such example.\\\n\\\nHere is a tx hash of a settlement that was executed onchain.\\\n\\\n0x17271e39305217d36635afbcc882e9431f9195d561d814aba96986cdd12dd240\\\n\\\nStarting from this hash, we can use the competition endpoint:\\\n\\\n",(0,s.kt)("a",{parentName:"p",href:"https://api.cow.fi/mainnet/api/v1/solver_competition/by_tx_hash/0x17271e39305217d36635afbcc882e9431f9195d561d814aba96986cdd12dd240"},"https://api.cow.fi/mainnet/api/v1/solver","_","competition/by","_","tx","_","hash/0x17271e39305217d36635afbcc882e9431f9195d561d814aba96986cdd12dd240"),"\\\n\\\nand then we can see that the auction id was 6462225. Note also that the competition endpoint reveals the calldata of all submitted solutions that successfully simulated and got ranked.\\\n\\\nUsing this id, we can now recover the instance.json of that auction:\\\n",(0,s.kt)("a",{parentName:"p",href:"https://solver-instances.s3.eu-central-1.amazonaws.com/prod-mainnet/6462225.json"},"https://solver-instances.s3.eu-central-1.amazonaws.com/prod-mainnet/6462225.json"),"\\\n\\"))}u.isMDXComponent=!0}}]);