"use strict";(self.webpackChunkcow_docs=self.webpackChunkcow_docs||[]).push([[285],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),i=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},l=function(e){var t=i(e.components);return n.createElement(c.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),s=i(a),m=r,f=s["".concat(c,".").concat(m)]||s[m]||u[m]||o;return a?n.createElement(f,p(p({ref:t},l),{},{components:a})):n.createElement(f,p({ref:t},l))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,p=new Array(o);p[0]=m;var d={};for(var c in t)hasOwnProperty.call(t,c)&&(d[c]=t[c]);d.originalType=e,d[s]="string"==typeof e?e:r,p[1]=d;for(var i=2;i<o;i++)p[i]=a[i];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6442:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>u,frontMatter:()=>o,metadata:()=>d,toc:()=>i});var n=a(7462),r=(a(7294),a(3905));const o={},p="BONUS: CIDv0 and AppData",d={unversionedId:"cow-sdk/order-meta-data-appdata/bonus-cidv0-and-appdata",id:"cow-sdk/order-meta-data-appdata/bonus-cidv0-and-appdata",title:"BONUS: CIDv0 and AppData",description:"As explained before, the AppData points to an IPFS document. So given any CIDv0 we can calculate the equivalentAppData and the other way around.",source:"@site/docs/cow-sdk/order-meta-data-appdata/bonus-cidv0-and-appdata.md",sourceDirName:"cow-sdk/order-meta-data-appdata",slug:"/cow-sdk/order-meta-data-appdata/bonus-cidv0-and-appdata",permalink:"/docs/docs/cow-sdk/order-meta-data-appdata/bonus-cidv0-and-appdata",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cow-sdk/order-meta-data-appdata/bonus-cidv0-and-appdata.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Order meta-data (AppData)",permalink:"/docs/docs/cow-sdk/order-meta-data-appdata/"},next:{title:"Create a meta-data document",permalink:"/docs/docs/cow-sdk/order-meta-data-appdata/create-a-meta-data-document"}},c={},i=[],l={toc:i},s="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(s,(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"bonus-cidv0-and-appdata"},"BONUS: CIDv0 and AppData"),(0,r.kt)("p",null,"As explained before, the ",(0,r.kt)("inlineCode",{parentName:"p"},"AppData")," points to an IPFS document. So given any ",(0,r.kt)("inlineCode",{parentName:"p"},"CIDv0")," we can calculate the equivalent",(0,r.kt)("inlineCode",{parentName:"p"},"AppData")," and the other way around."),(0,r.kt)("p",null,"Given an IPFS CIDv0 you can convert it to an ",(0,r.kt)("inlineCode",{parentName:"p"},"AppData")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { MetadataApi } from '@cowprotocol/app-data'\n\nexport const metadataApi = new MetadataApi()\n\nconst decodedAppDataHex = await metadataApi.cidToAppDataHex('QmUf2TrpSANVXdgcYfAAACe6kg551cY3rAemB7xfEMjYvs')\n")),(0,r.kt)("p",null,"This will return an ",(0,r.kt)("inlineCode",{parentName:"p"},"AppData")," hex: ",(0,r.kt)("inlineCode",{parentName:"p"},"0x5ddb2c8207c10b96fac92cb934ef9ba004bc007a073c9e5b13edc422f209ed80")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This might be handy if you decide to upload the document to IPFS yourself and then you need the AppData to post your order")),(0,r.kt)("p",null,"Similarly, you can do the opposite and convert an ",(0,r.kt)("inlineCode",{parentName:"p"},"AppData")," into an IPFS document:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { MetadataApi } from '@cowprotocol/app-data'\n\nexport const metadataApi = new MetadataApi()\n\nconst decodedAppDataHex = await metadataApi.appDataHexToCid(hash)\n")),(0,r.kt)("p",null,"This will return an IPFS CIDv0: ",(0,r.kt)("inlineCode",{parentName:"p"},"QmUf2TrpSANVXdgcYfAAACe6kg551cY3rAemB7xfEMjYvs")),(0,r.kt)("p",null,"\ud83c\udf89Congrats! you've learned how meta-data in orders work."))}u.isMDXComponent=!0}}]);