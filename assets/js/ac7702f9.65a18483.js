"use strict";(self.webpackChunkcow_docs=self.webpackChunkcow_docs||[]).push([[7093],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>w});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,w=u["".concat(i,".").concat(d)]||u[d]||f[d]||o;return n?a.createElement(w,s(s({ref:t},p),{},{components:n})):a.createElement(w,s({ref:t},p))}));function w(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[u]="string"==typeof e?e:r,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4355:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={},s="Approving the tokens to sell",l={unversionedId:"tutorials/cowswap-trades-with-a-gnosis-safe-wallet/approving-the-tokens-to-sell",id:"tutorials/cowswap-trades-with-a-gnosis-safe-wallet/approving-the-tokens-to-sell",title:"Approving the tokens to sell",description:"The first step is approving the tokens you want to sell to the GPv2VaultRelayer.",source:"@site/docs/tutorials/cowswap-trades-with-a-gnosis-safe-wallet/approving-the-tokens-to-sell.md",sourceDirName:"tutorials/cowswap-trades-with-a-gnosis-safe-wallet",slug:"/tutorials/cowswap-trades-with-a-gnosis-safe-wallet/approving-the-tokens-to-sell",permalink:"/docs/docs/tutorials/cowswap-trades-with-a-gnosis-safe-wallet/approving-the-tokens-to-sell",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorials/cowswap-trades-with-a-gnosis-safe-wallet/approving-the-tokens-to-sell.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CoW Protocol trades with a Gnosis Safe Wallet",permalink:"/docs/docs/tutorials/cowswap-trades-with-a-gnosis-safe-wallet/"},next:{title:"Conclusion",permalink:"/docs/docs/tutorials/cowswap-trades-with-a-gnosis-safe-wallet/conclusion"}},i={},c=[],p={toc:c},u="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"approving-the-tokens-to-sell"},"Approving the tokens to sell"),(0,r.kt)("p",null,"The first step is approving the tokens you want to sell to the ",(0,r.kt)("strong",{parentName:"p"},"GPv2VaultRelayer"),"."),(0,r.kt)("p",null,"The safe that I am using had ",(0,r.kt)("inlineCode",{parentName:"p"},"yvUSDC"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"yvYFI")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"yvLINK"),", so my first tx takes care of withdrawing and approving each token. Code is the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import click\nfrom ape_safe import ApeSafe\nfrom brownie *\n\ndef withdraw_and_approve_tokens_sep_21():\n    # Get the safe\n    safe = ApeSafe("0xMySafeAddress")\n\n    # Contract we need to approve so our tokens can be transferFrom\n    gnosis_vault_relayer = safe.contract("0xC92E8bdf79f0507f65a392b0ab4667716BFE0110")\n\n    # yearn vault tokens\n    yvUSDC = safe.contract("0x5f18C75AbDAe578b483E5F43f12a39cF75b973a9")\n    yvYFI = safe.contract("0xE14d13d8B3b85aF791b2AADD661cDBd5E6097Db1")\n    yvLINK = safe.contract("0x671a912C10bba0CFA74Cfc2d6Fba9BA1ed9530B2")\n\n    for vault in [yvUSDC, yvYFI, yvLINK]:\n        print(f"Processing {vault.name()}")\n\n        # Withdraw everything from the vault\n        vault.withdraw()\n        token = safe.contract(vault.token())\n        token_balance = token.balanceOf(safe.address)\n        print(f"Balance of {token.name()}: {(token_balance / 10 ** token.decimals()):_}")\n        assert token.balanceOf(safe.address) > 0\n\n        # Approve so we can create a cowswap order\n        token.approve(gnosis_vault_relayer, 2**256-1)\n\n\n    safe_tx = safe.multisend_from_receipts()\n    account = click.prompt("signer", type=click.Choice(accounts.load()))\n    safe_tx.sign(accounts.load(account).private_key)\n    safe.preview(safe_tx, events=False, call_trace=False)\n    safe.post_transaction(safe_tx)\n')),(0,r.kt)("p",null,"After testing in a fork, ape-safe will ask for your account password and submit the tx to the multisign."),(0,r.kt)("p",null,"After the tx is executed, we would have our vanilla erc-20 tokens plus all approvals needed to submit an order."))}f.isMDXComponent=!0}}]);