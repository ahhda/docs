"use strict";(self.webpackChunkcow_docs=self.webpackChunkcow_docs||[]).push([[9439],{3905:(e,o,t)=>{t.d(o,{Zo:()=>p,kt:()=>m});var r=t(7294);function n(e,o,t){return o in e?Object.defineProperty(e,o,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[o]=t,e}function c(e,o){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);o&&(r=r.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var o=1;o<arguments.length;o++){var t=null!=arguments[o]?arguments[o]:{};o%2?c(Object(t),!0).forEach((function(o){n(e,o,t[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(t,o))}))}return e}function a(e,o){if(null==e)return{};var t,r,n=function(e,o){if(null==e)return{};var t,r,n={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],o.indexOf(t)>=0||(n[t]=e[t]);return n}(e,o);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],o.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var s=r.createContext({}),l=function(e){var o=r.useContext(s),t=o;return e&&(t="function"==typeof e?e(o):i(i({},o),e)),t},p=function(e){var o=l(e.components);return r.createElement(s.Provider,{value:o},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var o=e.children;return r.createElement(r.Fragment,{},o)}},d=r.forwardRef((function(e,o){var t=e.components,n=e.mdxType,c=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=l(t),d=n,m=u["".concat(s,".").concat(d)]||u[d]||f[d]||c;return t?r.createElement(m,i(i({ref:o},p),{},{components:t})):r.createElement(m,i({ref:o},p))}));function m(e,o){var t=arguments,n=o&&o.mdxType;if("string"==typeof e||n){var c=t.length,i=new Array(c);i[0]=d;var a={};for(var s in o)hasOwnProperty.call(o,s)&&(a[s]=o[s]);a.originalType=e,a[u]="string"==typeof e?e:n,i[1]=a;for(var l=2;l<c;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5457:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>c,metadata:()=>a,toc:()=>l});var r=t(7462),n=(t(7294),t(3905));const c={},i="Configuration",a={unversionedId:"overview/cow-hooks/cow-hooks-example/configuration",id:"overview/cow-hooks/cow-hooks-example/configuration",title:"Configuration",description:"First things first, we need to configure some required user-specific things:",source:"@site/docs/overview/cow-hooks/cow-hooks-example/configuration.md",sourceDirName:"overview/cow-hooks/cow-hooks-example",slug:"/overview/cow-hooks/cow-hooks-example/configuration",permalink:"/docs/docs/overview/cow-hooks/cow-hooks-example/configuration",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/overview/cow-hooks/cow-hooks-example/configuration.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Conclusion",permalink:"/docs/docs/overview/cow-hooks/cow-hooks-example/conclusion"},next:{title:"Permit, Swap & Bridge CoW Hook",permalink:"/docs/docs/overview/cow-hooks/cow-hooks-example/permit-swap-and-bridge-cow-hook"}},s={},l=[],p={toc:l},u="wrapper";function f(e){let{components:o,...t}=e;return(0,n.kt)(u,(0,r.Z)({},p,t,{components:o,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"configuration"},"Configuration"),(0,n.kt)("p",null,"First things first, we need to configure some required user-specific things:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A URL of an Ethereum node to connect to"),(0,n.kt)("li",{parentName:"ul"},"The private key of the account to trade")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'# Configure the following values...\nexport NODE_URL="...";\nexport PRIVATE_KEY="...";\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'import { ethers } from "https://unpkg.com/ethers@5.7.2/dist/ethers.esm.js";\n\nconst provider = new ethers.providers.JsonRpcProvider(Deno.env.get("NODE_URL"));\nconst wallet = new ethers.Wallet(Deno.env.get("PRIVATE_KEY"), provider);\n\nconst { chainId } = await provider.getNetwork();\nconsole.log(`connected to chain ${chainId} with account ${wallet.address}`);\n')))}f.isMDXComponent=!0}}]);